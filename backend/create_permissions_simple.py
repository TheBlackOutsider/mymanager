#!/usr/bin/env python3
"""
Script simplifi√© de cr√©ation de la structure de base de donn√©es pour les permissions
Cr√©e seulement les tables essentielles sans relations complexes
"""

from main import SessionLocal, Base, engine
from sqlalchemy import Column, String, Boolean, ForeignKey, Table, Text, DateTime
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship
from datetime import datetime
from uuid import uuid4

# Table de liaison many-to-many pour les permissions des r√¥les
role_permissions = Table(
    'role_permissions',
    Base.metadata,
    Column('role_id', String, ForeignKey('roles.id')),
    Column('permission_id', UUID(as_uuid=True), ForeignKey('permissions.id'))
)

# Mod√®le pour les r√¥les
class Role(Base):
    __tablename__ = "roles"
    
    id = Column(String, primary_key=True)  # employee, manager, hr_officer, hr_head
    name = Column(String, nullable=False)   # Nom lisible du r√¥le
    description = Column(Text, nullable=True)
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relations
    permissions = relationship("Permission", secondary=role_permissions, back_populates="roles")

# Mod√®le pour les permissions
class Permission(Base):
    __tablename__ = "permissions"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    name = Column(String, nullable=False)           # Nom lisible de la permission
    resource = Column(String, nullable=False)       # events, leaves, employees, etc.
    action = Column(String, nullable=False)         # create, read, update, delete, approve
    scope = Column(String, nullable=False)          # self, team, department, all
    description = Column(Text, nullable=True)       # Description d√©taill√©e
    is_active = Column(Boolean, default=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relations
    roles = relationship("Role", secondary=role_permissions, back_populates="permissions")

def create_permissions_structure():
    """Cr√©e la structure de base de donn√©es pour les permissions"""
    print("üöÄ Cr√©ation de la structure de base de donn√©es des permissions...")
    
    # Cr√©ation des tables
    Base.metadata.create_all(bind=engine)
    print("‚úÖ Tables cr√©√©es avec succ√®s!")
    
    # Initialisation des donn√©es de base
    db = SessionLocal()
    
    try:
        print("\nüìù Initialisation des donn√©es de base...")
        
        # 1. Cr√©ation des r√¥les
        print("üë• Cr√©ation des r√¥les...")
        roles_data = [
            {"id": "employee", "name": "Employ√©", "description": "Utilisateur standard"},
            {"id": "manager", "name": "Manager", "description": "Chef d'√©quipe"},
            {"id": "hr_officer", "name": "Charg√© RH", "description": "Responsable RH"},
            {"id": "hr_head", "name": "Directeur RH", "description": "Directeur des ressources humaines"},
        ]
        
        for role_data in roles_data:
            existing = db.query(Role).filter(Role.id == role_data["id"]).first()
            if not existing:
                role = Role(**role_data)
                db.add(role)
                print(f"   ‚úÖ R√¥le cr√©√©: {role_data['name']}")
            else:
                print(f"   ‚ö†Ô∏è R√¥le existe d√©j√†: {role_data['name']}")
        
        # 2. Cr√©ation des permissions de base
        print("\nüîê Cr√©ation des permissions de base...")
        permissions_data = [
            # Permissions de profil
            {"name": "Voir son profil", "resource": "profile", "action": "read", "scope": "self", "description": "Acc√®s en lecture √† son propre profil"},
            {"name": "Modifier son profil", "resource": "profile", "action": "update", "scope": "self", "description": "Modification de son propre profil"},
            
            # Permissions des √©v√©nements
            {"name": "Voir les √©v√©nements", "resource": "events", "action": "read", "scope": "self", "description": "Acc√®s en lecture aux √©v√©nements"},
            {"name": "Cr√©er des √©v√©nements", "resource": "events", "action": "create", "scope": "all", "description": "Cr√©ation d'√©v√©nements"},
            {"name": "Modifier des √©v√©nements", "resource": "events", "action": "update", "scope": "team", "description": "Modification des √©v√©nements de l'√©quipe"},
            {"name": "Supprimer des √©v√©nements", "resource": "events", "action": "delete", "scope": "all", "description": "Suppression d'√©v√©nements"},
            
            # Permissions des cong√©s
            {"name": "Demander des cong√©s", "resource": "leaves", "action": "create", "scope": "self", "description": "Cr√©ation de demandes de cong√©s"},
            {"name": "Voir ses cong√©s", "resource": "leaves", "action": "read", "scope": "self", "description": "Acc√®s √† ses propres cong√©s"},
            {"name": "Voir les cong√©s de l'√©quipe", "resource": "leaves", "action": "read", "scope": "team", "description": "Acc√®s aux cong√©s de l'√©quipe"},
            {"name": "Approuver des cong√©s", "resource": "leaves", "action": "approve", "scope": "team", "description": "Approbation des cong√©s de l'√©quipe"},
            {"name": "Rejeter des cong√©s", "resource": "leaves", "action": "reject", "scope": "team", "description": "Rejet des cong√©s de l'√©quipe"},
            {"name": "G√©rer tous les cong√©s", "resource": "leaves", "action": "manage", "scope": "all", "description": "Gestion compl√®te des cong√©s"},
            
            # Permissions des employ√©s
            {"name": "Voir les employ√©s", "resource": "employees", "action": "read", "scope": "team", "description": "Acc√®s aux informations des employ√©s de l'√©quipe"},
            {"name": "G√©rer tous les employ√©s", "resource": "employees", "action": "manage", "scope": "all", "description": "Gestion compl√®te des employ√©s"},
            
            # Permissions des rapports
            {"name": "Voir les rapports", "resource": "reports", "action": "read", "scope": "team", "description": "Acc√®s aux rapports de l'√©quipe"},
            {"name": "G√©n√©rer des rapports", "resource": "reports", "action": "generate", "scope": "team", "description": "G√©n√©ration de rapports"},
            {"name": "Exporter des rapports", "resource": "reports", "action": "export", "scope": "all", "description": "Export des rapports"},
            
            # Permissions syst√®me
            {"name": "Configuration syst√®me", "resource": "system", "action": "configure", "scope": "all", "description": "Configuration des param√®tres syst√®me"},
            {"name": "Audit et logs", "resource": "audit", "action": "read", "scope": "all", "description": "Acc√®s aux logs d'audit"},
            {"name": "Configuration de l'audit", "resource": "audit", "action": "configure", "scope": "all", "description": "Configuration de l'audit"},
        ]
        
        for perm_data in permissions_data:
            existing = db.query(Permission).filter(
                Permission.resource == perm_data["resource"],
                Permission.action == perm_data["action"],
                Permission.scope == perm_data["scope"]
            ).first()
            
            if not existing:
                permission = Permission(**perm_data)
                db.add(permission)
                print(f"   ‚úÖ Permission cr√©√©e: {perm_data['name']}")
            else:
                print(f"   ‚ö†Ô∏è Permission existe d√©j√†: {perm_data['name']}")
        
        # 3. Attribution des permissions aux r√¥les
        print("\nüîó Attribution des permissions aux r√¥les...")
        
        # R√©cup√©ration des r√¥les et permissions
        employee_role = db.query(Role).filter(Role.id == "employee").first()
        manager_role = db.query(Role).filter(Role.id == "manager").first()
        hr_officer_role = db.query(Role).filter(Role.id == "hr_officer").first()
        hr_head_role = db.query(Role).filter(Role.id == "hr_head").first()
        
        # Permissions pour Employee
        if employee_role:
            employee_permissions = db.query(Permission).filter(
                Permission.scope == "self",
                Permission.resource.in_(["profile", "events", "leaves"])
            ).all()
            employee_role.permissions = employee_permissions
            print(f"   ‚úÖ {len(employee_permissions)} permissions attribu√©es au r√¥le Employee")
        
        # Permissions pour Manager
        if manager_role:
            manager_permissions = db.query(Permission).filter(
                Permission.scope.in_(["self", "team"]),
                Permission.resource.in_(["profile", "events", "leaves", "reports"])
            ).all()
            manager_role.permissions = manager_permissions
            print(f"   ‚úÖ {len(manager_permissions)} permissions attribu√©es au r√¥le Manager")
        
        # Permissions pour HR Officer
        if hr_officer_role:
            hr_officer_permissions = db.query(Permission).filter(
                Permission.scope.in_(["self", "all"]),
                Permission.resource.in_(["profile", "events", "leaves", "employees", "reports"])
            ).all()
            hr_officer_role.permissions = hr_officer_permissions
            print(f"   ‚úÖ {len(hr_officer_permissions)} permissions attribu√©es au r√¥le HR Officer")
        
        # Permissions pour HR Head
        if hr_head_role:
            hr_head_permissions = db.query(Permission).filter(
                Permission.scope.in_(["self", "all"]),
                Permission.resource.in_(["profile", "events", "leaves", "employees", "reports", "system", "audit"])
            ).all()
            hr_head_role.permissions = hr_head_permissions
            print(f"   ‚úÖ {len(hr_head_permissions)} permissions attribu√©es au r√¥le HR Head")
        
        # Commit des changements
        db.commit()
        print("\nüéâ Structure des permissions cr√©√©e avec succ√®s!")
        
        # R√©sum√©
        print("\nüìä R√©sum√©:")
        print(f"   - R√¥les: {db.query(Role).count()}")
        print(f"   - Permissions: {db.query(Permission).count()}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {str(e)}")
        db.rollback()
        raise
    finally:
        db.close()

if __name__ == "__main__":
    create_permissions_structure() 