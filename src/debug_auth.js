// Script de debug pour l'authentification
// √Ä ex√©cuter dans la console du navigateur

console.log('üîç Debug de l\'authentification...');

// 1. V√©rifier le token dans localStorage
const token = localStorage.getItem('authToken');
console.log('1Ô∏è‚É£ Token dans localStorage:', token ? `${token.substring(0, 20)}...` : '‚ùå Aucun token');

// 2. V√©rifier le refresh token
const refreshToken = localStorage.getItem('refreshToken');
console.log('2Ô∏è‚É£ Refresh token dans localStorage:', refreshToken ? `${refreshToken.substring(0, 20)}...` : '‚ùå Aucun refresh token');

// 3. V√©rifier l'√©tat Redux (si accessible)
if (window.__REDUX_DEVTOOLS_EXTENSION__) {
  console.log('3Ô∏è‚É£ Redux DevTools disponible');
} else {
  console.log('3Ô∏è‚É£ Redux DevTools non disponible');
}

// 4. Test de l'API avec le token
if (token) {
  console.log('4Ô∏è‚É£ Test de l\'API avec le token...');
  
  fetch('http://localhost:8000/api/reports/analytics', {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    }
  })
  .then(response => {
    console.log('üìä Status:', response.status);
    console.log('üìã Headers:', Object.fromEntries(response.headers.entries()));
    return response.json();
  })
  .then(data => {
    console.log('üìÑ Donn√©es:', data);
  })
  .catch(error => {
    console.error('‚ùå Erreur:', error);
  });
} else {
  console.log('4Ô∏è‚É£ Pas de token, impossible de tester l\'API');
}

// 5. V√©rifier la structure de la r√©ponse d'authentification
console.log('5Ô∏è‚É£ Structure attendue de la r√©ponse:');
console.log('- action.payload.token');
console.log('- action.payload.refreshToken');
console.log('- action.payload.user');
console.log('- action.payload.permissions'); 